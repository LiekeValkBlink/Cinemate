@using Cinemate.Models.Dto
@using Cinemate.Web.Services.Contracts
@inject ISelectedMovieService SelectedMovieService

@code {
    // Parameters
    [Parameter]
    public int MovieId { get; set; }

    [Parameter]
    public DateTime SelectedDate { get; set; }
}

@code {
    [Inject] public IScreeningService? ScreeningService { get; set; }
    [Inject] protected PreloadService PreloadService { get; set; } = default!;


    private IEnumerable<ScreeningWithInfoDto>? AllScreenings { get; set; }
    private IEnumerable<ScreeningWithInfoDto>? AllScreeningsForMovie { get; set; }


    protected override async Task OnInitializedAsync()
    {
        AllScreenings = await ScreeningService?.GetAllScreenings();
        if (AllScreenings != null)
        {
            // Filter AllScreenings based on MovieId
            var selectedMovieId = MovieId;

            if (selectedMovieId != null)
            {
                AllScreeningsForMovie = AllScreenings.Where(s => s.MovieId == selectedMovieId);
            }
        }
    }
}

@{
    var currentDate = SelectedDate;
    Console.WriteLine("currentdate:");
    Console.WriteLine(currentDate);
    var currentTime = DateTime.Now.TimeOfDay;



}



    <div class="time-slot-selector-container">
        <div class="time-slot-selector-inner">
        @foreach (var screening in AllScreeningsForMovie.Where(screening => screening.MovieStart.Date == currentDate.Date))
        {
            Console.WriteLine(screening.MovieStart);
                <Web_TimeSlot ScreeningInfo="@screening"></Web_TimeSlot>
        }
        </div>
    </div>



