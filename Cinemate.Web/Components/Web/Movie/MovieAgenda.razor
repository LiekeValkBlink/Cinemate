@using Cinemate.Models.Dto
@using Cinemate.Web.Services.Contracts 
@inject ISelectedMovieService SelectedMovieService
@inject IJSRuntime JSRuntime


@code {
    [Parameter]
    public DateTime SelectedDate { get; set; }
}


@code{
    // alle movies ophalen en omvormen naar movies met imageurl
    // Injecteren van de services
     [Inject] public IMovieService? MovieService { get; set; }
    [Inject] public IScreeningService? ScreeningService { get; set; }
     [Inject] protected PreloadService PreloadService { get; set; } = default!;


    // Variabelen voor het opslaan van films en screenings
     private IEnumerable<MovieWithCategoryDto>? AllMovies { get; set; }
     private IEnumerable<MovieDtoImage>? AllMoviesWithImage { get; set; }
    private IEnumerable<ScreeningWithInfoDto>? AllScreenings { get; set; }
 
     protected override async Task OnInitializedAsync() {
        // Films ophalen
         AllMovies = await MovieService?.GetMovies();
         
         AllMoviesWithImage = AllMovies.Select(movie => new MovieDtoImage {
             Id = movie.Id,
             Title = movie.Title,
             Description = movie.Description,
             Duration = movie.Duration,
             ReleaseYear = movie.ReleaseYear,
             MovieCategoryId = movie.MovieCategoryId,
             MovieCategoryDescription = movie.MovieCategoryDescription,
             Director = movie.Director,
             Cast = movie.Cast,
             Review = movie.Review,
             Kijkwijzers = movie.Kijkwijzers,
             MoviePosterUrl = $"https://localhost:7201/images/posters/movie_{movie.Id}_image.jpg",
             MovieScreenshotUrl = $"https://localhost:7201/images/screenshots/movie-screenshot_{movie.Id}_image.jpg"
         }).ToList();

         // alle screenings ophalen
        AllScreenings = await ScreeningService?.GetAllScreenings();
     }


    MovieDtoImage Secretmovie = new MovieDtoImage
        {
            Id = 0,
            Title = "Secret Movie",
            Description = "Secret Movie Description",
            Duration = 0,
            ReleaseYear = 0,
            MovieCategoryId = 0,
            MovieCategoryDescription = "Secret Category Description",
            Director = "Secret Director",
            Cast = "Secret Cast",
            Review = 0,
            Kijkwijzers = "Secret Kijkwijzers",
            MoviePosterUrl = $"https://localhost:7201/images/posters/SecretMovie.jpg",
            MovieScreenshotUrl = $"https://localhost:7201/images/screenshots/SecretMovie.jpg"
        };
}
 
<div class="movie-container">
    @if (AllMoviesWithImage == null || !AllMoviesWithImage.Any())
    {
        <h2>Movies not available</h2>
        
    }
    else
    {
        <a class="movie-container-inner">
            <div class="movie" style="background-image: url('@(Secretmovie.MoviePosterUrl)');"></div>
            <div class="movie-details">
                <h3>@Secretmovie.Title</h3>
            </div>
        </a>
        @foreach (var movie in AllMoviesWithImage)
        {
            // Filter van alle screenings op basis van de geselecteerde datum
            var screeningsForDate = AllScreenings?.Where(s => s.MovieStart.Date == SelectedDate.Date && s.MovieStart > DateTime.Now);

            // zijn er films beschikbaar voor de gekozen datum
            if (screeningsForDate != null && screeningsForDate.Any())
            {
                // kijk of de movie van de foreach screenings heeft voor de geselcteerde datum
                if (screeningsForDate.Any(s => s.MovieId == movie.Id))
                {
                    <a class="movie-container-inner">
                        <div class="movie" style="background-image: url('@(movie.MoviePosterUrl)');"></div>
                        <div class="movie-details">
                            <h3>@movie.Title</h3>
                            <TimeSlotSelector MovieId="@movie.Id" SelectedDate="@SelectedDate"></TimeSlotSelector>
                        </div>
                    </a>
                }
            }
        }
    }
</div>

