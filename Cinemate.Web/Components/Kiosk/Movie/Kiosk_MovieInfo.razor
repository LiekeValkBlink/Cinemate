@using Cinemate.Models.Dto
@using Cinemate.Models.Enum
@using Cinemate.Web.Services.Contracts
@inject ISelectedMovieService SelectedMovieService




<img class="movie-img-container" src="@(selectedMovie?.MovieScreenshotUrl)" alt="Movie screenshot" />

<h1>@(selectedMovie?.Title)</h1>

<div class="movie-details-primary">
    <div class="mpa-rating">
        @if (selectedMovie?.Kijkwijzers != null)
        {

            foreach (var kijkwijzer in Enum.GetValues(typeof(Kijkwijzer)))
            {
 
                if (selectedMovie.Kijkwijzers.Contains(kijkwijzer.ToString()))
                {
                    var safeFileName = GetSafeFileName(kijkwijzer.ToString());

                    var imagePath = $"/images/kijkwijzer/kijkwijzer-{safeFileName}.svg";

                    // Gebruik relatief pad naar de afbeelding
                    <img class="mpa-icon" src="@imagePath" alt="Kijkwijzer - @kijkwijzer" />
                }
            }
        }
    </div>
    <p class="movie-duration">@selectedMovie?.Duration Minuten</p>
</div>



<p>@(selectedMovie?.Description)</p>

<table class="movie-details-secondary">
    <tbody>
    <tr>
        <td>
            <p>Bij Cinemate vanaf</p>
        </td>
        <td>
                <p>@(nextScreeningDateTime != null ? FormatDate(nextScreeningDateTime.Value) : "Nog geen voorstellingen beschikbaar")</p>

        </td>
    </tr>
    <tr>
        <td>
            <p>Genre</p>
        </td>
        <td>
              <p>@(selectedMovie?.MovieCategoryDescription)</p>
        </td>
    </tr>
    <tr>
        <td>
            <p>Gesproken taal</p>
        </td>
        <td>
            <p>Nederlands</p>
        </td>
    </tr>
    <tr>
        <td>
            <p>Jaar van uitgave</p>
        </td>
        <td>
                <p>@(selectedMovie?.ReleaseYear)</p>
        </td>
    </tr>
        <tr>
            <td>
                <p>Land van uitgave</p>
            </td>
            <td>
                <p>@(selectedMovie?.ReleaseCountry)</p>
            </td>
        </tr>
    <tr>
        <td>
            <p>Regisseur</p>
        </td>
        <td>
                <p>@(selectedMovie?.Director)</p>
        </td>
    </tr>
    <tr>
        <td>
            <p>Acteurs</p>
        </td>
        <td>
                <p>@(selectedMovie?.Cast)</p>
        </td>
    </tr>
    </tbody>
</table>

@code {

    private MovieDtoImage selectedMovie;

    protected override async Task OnInitializedAsync()
    {
        selectedMovie = await SelectedMovieService.GetSelectedMovieAsync();
        AllScreenings = await ScreeningService?.GetAllScreenings();

        FindNextScreening();
    }


    public string FormatDate(DateTime date)
    {
        return date.ToString("dddd d MMMM yyyy");
    }
}


@code {
    //code om eerste screening datetime op te halen
    [Inject] public IScreeningService? ScreeningService { get; set; }
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    private IEnumerable<ScreeningWithInfoDto>? AllScreenings { get; set; }

        DateTime? nextScreeningDateTime;

        private void FindNextScreening()
        {
            var screeningsForMovie = AllScreenings.Where(screening => screening.MovieId == selectedMovie.Id);
            var sortedScreenings = screeningsForMovie.OrderBy(screening => screening.MovieStart);
            var nextScreening = sortedScreenings.FirstOrDefault();
            if (nextScreening != null)
            {
                nextScreeningDateTime = nextScreening.MovieStart;
            }
            else
            {
                nextScreeningDateTime = null; 
            }

    }


}
 @functions {
    public string GetSafeFileName(string input)
    {
        return input.ToLower()
                    .Replace(" ", "-")
                    .Replace("/", "-")
                    .Replace("&", "")
                    .Replace("é", "e")
                    .Replace("ë", "e")
                    .Replace("(", "")
                    .Replace(")", "")
                    .Replace("ó", "o")
                    .Replace("ö", "o")
                    .Replace("ü", "u")
                    .Replace(" ", "")
                    .Replace("geweldseks", "geweld-seks")
                    .Replace("grofgeweld", "grof-geweld")
                    .Replace("zelfdoding", "zelf-doding")
                    .Replace("drugsenalcoholgebruik", "drugsenalcoholgebruik")
                    .Replace("groftaalgebruik", "GrofTaalgebruik")
                    .Replace(" ", "-")
                    .Replace("en/of", "en-of");
    }
}
