@using Cinemate.Models.Dto
@using Cinemate.Web.Services.Contracts
@inject ISelectedMovieService SelectedMovieService

@code {
    [Inject] public IScreeningService ScreeningService { get; set; } = default!;
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    [Parameter] public int MovieId { get; set; }


    private IEnumerable<ScreeningWithInfoDto>? AllScreenings { get; set; }
    private IEnumerable<ScreeningWithInfoDto>? AllScreeningsForMovie { get; set; }


    protected override async Task OnInitializedAsync()
    {
        AllScreenings = await ScreeningService.GetAllScreenings();
        if (AllScreenings != null)
        {
            // Filter AllScreenings based on MovieId
            AllScreeningsForMovie = AllScreenings.Where(s => s.MovieId == MovieId);
        }
    }
}

@{

    var currentDate = DateTime.Today;
    var currentTime = DateTime.Now.TimeOfDay;
    var uniqueDates = AllScreeningsForMovie?
        .Select(s => s.MovieStart.Date)
        .Distinct() ?? Enumerable.Empty<DateTime>();
}




@foreach (var date in uniqueDates.Where (date => date >= currentDate))
{
    <div class="time-slot-selector-container">
        <h3>@date.ToString("dddd d MMMM")</h3>
        <div class="time-slot-selector-inner">
            @foreach (var screening in AllScreeningsForMovie.Where(s => s.MovieStart.Date == date && (date > currentDate || (date == currentDate && s.MovieStart.TimeOfDay >= currentTime))))
            {
                    <Kiosk_TimeSlot ScreeningInfo="@screening"></Kiosk_TimeSlot>
            }
        </div>
    </div>
}


