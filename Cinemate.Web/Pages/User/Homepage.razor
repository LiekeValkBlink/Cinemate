@page "/Homepage"
@using Cinemate.Models
@using Cinemate.Models.Dto
@using Cinemate.Web.Services.Contracts
@inherits LayoutComponentBase
@inject ISelectedMovieService SelectedMovieService

<PageTitle>Cinemate Movies</PageTitle>



@code{
    private void SubscribeToNewsletter()
    {

    }
}


<style>
    .custom-h3 {
        font-family: "Proxima Nova";
        font-size: 26px;
        font-weight: 700;
        line-height: 26px;
        letter-spacing: 0em;
        text-align: left;
        color: #ffffff;
        margin-left: 28px;
        
    }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-12" style="background: #19072C; height: calc(100vh * 1); overflow-y: auto;">
            <h3 class="custom-h3 mb-4"> Nu in de bioscoop</h3>
            <div class="row row-cols-1 row-cols-xs-1 row-cols-sm-2 row-cols-md-4 row-cols-lg-5 g-2">

                @if (AllMoviesWithImage == null)
                {
                    <h3 style="color: white;">Loading movies</h3>
                }
                else
                {
                    @foreach (var movie in AllMoviesWithImage)
            {
                    <div class="col-md-3 mb-2">
                            <a @onclick="() => SaveAndNavigate(movie)" style="cursor: pointer;">
                        <div class="card" style="height: calc(100vh * 0.50); background: #19072C; ">
                                <div class="card-img-top" style="background-image: url('@(movie.Imageurl)'); background-size: cover; background-position: center; height: 100%; border-radius: 20px 8px 20px 8px;"></div>
                        </div>
                            </a>
                    </div>
            }
                }
            </div>
            <div class="col-12 d-flex flex-column justify-content-center align-items-center " style="background: #2B1B3C;  overflow: hidden;">
                <div class="text-white text-center mt-4" style="font-family: 'Proxima Nova'; font-size: 26px;">Volg ons ook via</div>
                <div class="d-flex justify-content-center mt-3 mb-3 ">
                    <a href="https://twitter.com/">
                    <img src="images\brand-x.png" alt="Logo X" style="margin-right: 2vw" >
                    </a>
                    <a href="https://www.youtube.com">
                    <img src="images\brand-youtube-filled.png" alt="Logo YouTube" >
                    </a>
                    <a href="https://www.instagram.com/">
                    <img src="images\brand-instagram.png" alt="Logo Instagram " style="margin-left: 2vw">
                    </a>
                </div>
                <div class="mb-5"></div>
                <div class="text-white text-center mb-1" style="font-family: 'Proxima Nova'; font-size: 26px;">Blijf op de hoogte</div>
                <div class="text-white text-center mb-4" style="font-size: 14px;">Schrijf je in voor onze nieuwsbrief</div>
                <div class="input-group mb-5" style="width: 80vw; max-width: 500px">
                    <input type="email" class="form-control" placeholder="Vul hier uw e-mailadres in" style="height: 50px; background:#19072C; color: white;">
                    <div class="input-group-append">
                        <button class="btn btn-primary" style="background: #6C42BF; height: 50px;" @onclick="SubscribeToNewsletter">Bevestigen</button>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@code{
    [Inject] public IMovieService MovieService { get; set; }
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    public IEnumerable<MovieWithCategoryDto> AllMovies { get; set; }
    public IEnumerable<MovieDtoImage> AllMoviesWithImage { get; set; }


    protected override async Task OnInitializedAsync()
    {
        AllMovies = await MovieService.GetMovies();

        AllMoviesWithImage = AllMovies.Select(movie => new MovieDtoImage
            {
                Id = movie.Id,
                Title = movie.Title,
                Description = movie.Description,
                Duration = movie.Duration,
                ReleaseYear = movie.ReleaseYear,
                MovieCategoryId = movie.MovieCategoryId,
                MovieCategoryDescription = movie.MovieCategoryDescription,
                Director = movie.Director,
                Cast = movie.Cast,
                Review = movie.Review,
                Kijkwijzers = movie.Kijkwijzers,
                Imageurl = $"/images/movies/{movie.Id}.jpg"
            }).ToList();



    }
    @code {
        [Inject] public NavigationManager NavigationManager { get; set; }

        private MovieDto movie;

      
        private async Task SaveAndNavigate(MovieDtoImage movie)
        {
            if (movie != null)
            {
                // Opslaan van de geselecteerde film met behulp van IMovieService
                SelectedMovieService.SelectedMovie = movie;

                // Navigeren naar /show-reservation met de bijgewerkte film-ID
                NavigationManager.NavigateTo($"/show-reservation?movieId={movie.Id}");
            }
        }
    }


 
}


