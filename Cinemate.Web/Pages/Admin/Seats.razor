@page "/admin/Seats"
@layout AdminLayout
@using Cinemate.Web.Services.Contracts
@using Cinemate.Models.Dto
<PageTitle>Seats</PageTitle>

<Card>
    <CardBody>
        @if (isSeatAddedSuccess)
        {
            <Alert Color="AlertColor.Success"  Dismissable="true">
                <Icon Name="IconName.CheckCircleFill" class="me-2"></Icon>
                Seat added successfully!
            </Alert>
        }
        <h1>Seats</h1>
        <Button Color="ButtonColor.Primary" class="my-4" @onclick="ShowModal">Add Movie</Button>
        @if (allSeats is not null)
        {
            <Grid @ref="seatsGrid" 
                  TItem="SeatsWInfoDto" 
                  Class="table table-hover table-bordered table-striped"
                  DataProvider="DataProvider"
                  AllowFiltering="true"
                  AllowSorting="true"
                  AllowPaging="true"
                  Responsive="true">
                <GridColumn TItem="SeatsWInfoDto" HeaderText="Id" PropertyName="Id" SortKeySelector="@(item => item.Id)" IsDefaultSortColumn="true" SortDirection="SortDirection.Ascending">@context.Id</GridColumn>
                <GridColumn TItem="SeatsWInfoDto" HeaderText="Row" PropertyName="Row" SortKeySelector="@(item => item.Row)" IsDefaultSortColumn="true" SortDirection="SortDirection.Ascending">@context.Row</GridColumn>
                <GridColumn TItem="SeatsWInfoDto" HeaderText="Number" PropertyName="Number" SortKeySelector="@(item => item.Number)" IsDefaultSortColumn="true" SortDirection="SortDirection.Ascending">@context.Number</GridColumn>
                <GridColumn TItem="SeatsWInfoDto" HeaderText="Theater Room Id" PropertyName="Theater Room Id" SortKeySelector="@(item => item.TheaterRoomId)" IsDefaultSortColumn="true" SortDirection="SortDirection.Ascending">@context.TheaterRoomId</GridColumn>
                <GridColumn TItem="SeatsWInfoDto" HeaderText="Theater Room" PropertyName="Theater Room" SortKeySelector="@(item => item.TheaterName)" IsDefaultSortColumn="true" SortDirection="SortDirection.Ascending">@context.TheaterName</GridColumn>
            </Grid>
        }
    </CardBody>
</Card>

<Modal @ref="addSeatModal" Title="Add Seat">
    <BodyTemplate>
        <EditForm Model="addSeatsDto" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="theaterRoomId">Theater Room:</label>
                    <select @bind="addSeatsDto.TheaterRoomId" class="form-control">
                        @foreach (var theaterRoom in allTheaterRooms)
                        {
                            <option value="@theaterRoom.Id">@theaterRoom.Name</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => addSeatsDto.TheaterRoomId)" />
                </div>
    
                <div class="form-group">
                    <label for="row">Row:</label>
                    <InputNumber @bind-Value="@addSeatsDto.Row" id="row" class="form-control" />
                    <ValidationMessage For="@(() => addSeatsDto.Row)" />
                </div>
    
                <div class="form-group">
                    <label for="number">Number:</label>
                    <InputNumber @bind-Value="@addSeatsDto.Number" id="number" class="form-control" />
                    <ValidationMessage For="@(() => addSeatsDto.Number)" />
                </div>
    
                <button type="submit" class="btn btn-primary">Add Seat</button>
        </EditForm>
    </BodyTemplate>
</Modal>

@code { // C# code block
    [Inject] private PreloadService PreloadService { get; set; } = default!; // Injected preload service
    [Inject] private ISeatsService SeatsService { get; set; } // Injected seats service
    [Inject] private ITheaterRoomService TheaterRoomService { get; set; } // Injected theater room service

    private IEnumerable<TheaterRoomsWInfoDto> allTheaterRooms; // Collection of all theater rooms
    private IEnumerable<SeatsWInfoDto> allSeats; // Collection of all seats
    private AddSeatsDto addSeatsDto = new AddSeatsDto(); // DTO for adding seats
    private bool isSeatAddedSuccess { get; set; } // Flag to indicate if a seat was added successfully

    private Modal addSeatModal = default!; // Reference to the add seat modal
    private Grid<SeatsWInfoDto> seatsGrid = default!; // Reference to the seats grid

    private async Task HandleValidSubmit() // Method to handle valid form submission
    {
        try
        {
            PreloadService.Show(); // Show loading spinner
            var result = await SeatsService.AddSeat(addSeatsDto); // Add the seat
            await addSeatModal.HideAsync(); // Hide the add seat modal
            allSeats.Append(result); // Add the new seat to the collection
            allSeats = await SeatsService.GetAllSeats(); // Refresh the list of seats
            await seatsGrid.RefreshDataAsync(); // Refresh the seats grid
            PreloadService.Hide(); // Hide loading spinner
        }
        catch (Exception e)
        {
            Console.WriteLine(e); // Log the exception
            throw; // Rethrow the exception
        }
    }
    
    private async Task<GridDataProviderResult<SeatsWInfoDto>> DataProvider(GridDataProviderRequest<SeatsWInfoDto> request) // Method to provide data to the grid
    {
        return await Task.FromResult(request.ApplyTo(allSeats)); // Apply filtering, sorting, and paging to the data
    }

    private async Task ShowModal() // Method to show the add seat modal
    {
        await addSeatModal.ShowAsync(); // Show the modal asynchronously
    }

    protected override async Task OnInitializedAsync() // Method called when the component is initialized
    {
        PreloadService.Show(); // Show loading spinner
        allSeats = await SeatsService.GetAllSeats(); // Get all seats
        allTheaterRooms = await TheaterRoomService.GetAllTheaterRooms(); // Get all theater rooms
        PreloadService.Hide(); // Hide loading spinner
    }
}
