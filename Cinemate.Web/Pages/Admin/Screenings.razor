@layout AdminLayout
@page "/admin/screenings"
@using Cinemate.Web.Services.Contracts
@using Cinemate.Models.Dto
@using Cinemate.Models.Static
<PageTitle>Screening</PageTitle>

<Card>
    <CardBody>
        @if (IsScreeningAddedSucces)
        {
            <Alert Color="AlertColor.Success"  Dismissable="true">
                <Icon Name="IconName.CheckCircleFill" class="me-2"></Icon>
                Screening added successfully!
            </Alert>
        }
        <h1>Screenings</h1>
        <Button Color="ButtonColor.Primary" class="my-4" @onclick="ShowModal">Add Screening</Button>

        @if (AllScreenings is not null)
        {
            <Grid @ref="screeningGrid"
                  TItem="ScreeningWithInfoDto"
                  Class="table table-hover table-bordered table-striped"
                  DataProvider="GridDataProvider"
                  AllowFiltering="true"
                  AllowSorting="true"
                  AllowPaging="true"
                  Responsive="true"
                  PageSize="20">
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Id" PropertyName="Id" SortKeySelector="@(item => item.Id)" IsDefaultSortColumn="true" SortDirection="SortDirection.Ascending">@context.Id</GridColumn>
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Movie Id" PropertyName="MovieId">@context.MovieId</GridColumn>
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Movie Name" PropertyName="MovieName">@context.MovieName</GridColumn>
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Theater Room Id" PropertyName="TheaterRoomId">@context.TheaterRoomId</GridColumn>
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Theater Name" PropertyName="TheaterName">@context.TheaterName</GridColumn>
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Movie Start" PropertyName="MovieStart">@context.MovieStart</GridColumn>

            </Grid>
        }
    </CardBody>
</Card>

<Modal @ref="AddScreeningModal" Title="Add Screening">
    <BodyTemplate>
        <EditForm Model="@addScreeningDto" OnValidSubmit="@HandleValidSubmit">
            <ValidationSummary />
            
                        <div class="mb-3">
                            <label for="movieId" class="form-label">Movie</label>
                            <select id="movieId" class="form-select" @bind="@addScreeningDto.MovieId">
                                <option value="">Select a movie</option>
                                @foreach (var movie in AllMovies)
                                {
                                    <option value="@movie.Id">@movie.Title</option>
                                }
                            </select>
                            <ValidationMessage For="@(() => addScreeningDto.MovieId)" />
                        </div>
            
                        <div class="mb-3">
                            <label for="theaterRoomId" class="form-label">Theater Room</label>
                            <select id="theaterRoomId" class="form-select" @bind="@addScreeningDto.TheaterRoomId">
                                <option value="">Select a theater room</option>
                                @foreach (var room in AllTheatherRooms)
                                {
                                    <option value="@room.Id">@room.Name</option>
                                }
                            </select>
                            <ValidationMessage For="@(() => addScreeningDto.TheaterRoomId)" />
                        </div>
            
                        <div class="mb-3">
                            <RadzenLabel Text="Select starting time" Component="DatePickerWithTime"/>
                            <RadzenDatePicker @bind-Value="@addScreeningDto.MovieStart" ShowTime="true" DateFormat="MM/dd/yyyy HH:mm" Name="DatePickerWithTime"></RadzenDatePicker>
                        </div>
            
                        <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </BodyTemplate>
</Modal>

@code {
    [Inject] private IScreeningService ScreeningService { get; set; }
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    [Inject] private IMovieService MovieService { get; set; }
    [Inject] private ITheaterRoomService TheaterRoomService { get; set; }

    private IEnumerable<ScreeningWithInfoDto> AllScreenings { get; set; }
    private IEnumerable<MovieWithCategoryDto> AllMovies { get; set; }
    private IEnumerable<TheaterRoomsDto> AllTheatherRooms { get; set; }
    private bool IsScreeningAddedSucces { get; set; }
    private AddScreeningDto addScreeningDto = new AddScreeningDto();
    
    private Grid<ScreeningWithInfoDto> screeningGrid = default!;
    private Modal AddScreeningModal = default!;
    

    private async Task<GridDataProviderResult<ScreeningWithInfoDto>> GridDataProvider(GridDataProviderRequest<ScreeningWithInfoDto> request)
    {
        return await Task.FromResult(request.ApplyTo(AllScreenings));
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            addScreeningDto.MovieStart = addScreeningDto.MovieStart.SetKindUtc();
            PreloadService.Show();
            var result = await ScreeningService.AddScreening(addScreeningDto);
            IsScreeningAddedSucces = true;
            await AddScreeningModal.HideAsync();
            AllScreenings.Append(result);
            AllScreenings = await ScreeningService.GetAllScreenings();
            await screeningGrid.RefreshDataAsync();
            PreloadService.Hide();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show();
        AllScreenings = await ScreeningService.GetAllScreenings();
        AllMovies = await MovieService.GetMovies();
        AllTheatherRooms = await TheaterRoomService.GetAllTheaterRooms();
        PreloadService.Hide();
    }

    private async Task ShowModal()
    {
        await AddScreeningModal.ShowAsync();
    }
    
   

}