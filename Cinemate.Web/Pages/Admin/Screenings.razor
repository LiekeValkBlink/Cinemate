@layout AdminLayout
@page "/admin/screenings"
@using Cinemate.Web.Services.Contracts
@using Cinemate.Models.Dto
@using Cinemate.Models.Static
@using Cinemate.Web.Components.Admin
@inject DialogService DialogService
@inject TooltipService TooltipService

<PageTitle>Screening</PageTitle>

<Card>
    <CardBody>
        <h1 class="mb-3">Screenings</h1>
        @if (IsScreeningAddedSuccess)
        {
            <Alert Color="AlertColor.Success"  Dismissable="true">
                <Icon Name="IconName.CheckCircleFill" class="me-2"></Icon>
                Screening added successfully!
            </Alert>
        }   


        <RadzenScheduler
            @ref="@_scheduler"
            SlotRender=@OnSlotRender
            TItem="Appointment"
            Data="Appointments"
            StartProperty="MovieStart"
            EndProperty="MovieEnd"
            TextProperty="AppointmentTitle"
            SlotSelect=@OnSlotSelect
            AppointmentSelect=@OnAppointmentSelect
            AppointmentMouseEnter=@OnAppointmentMouseEnter
            AppointmentMouseLeave=@OnAppointmentMouseLeave>
            <RadzenDayView/>
            <RadzenWeekView/>
            <RadzenMonthView/>
        </RadzenScheduler>
        
        @if (AllScreenings is not null)
        {
            <Grid @ref="_screeningGrid"
                  TItem="ScreeningWithInfoDto"
                  Class="table table-hover table-bordered table-striped mt-5"
                  DataProvider="GridDataProvider"
                  AllowFiltering="true"
                  AllowSorting="true"
                  AllowPaging="true"
                  Responsive="true"
                  PageSize="20">
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Id" PropertyName="Id" SortKeySelector="@(item => item.Id)" IsDefaultSortColumn="true" SortDirection="SortDirection.Ascending">@context.Id</GridColumn>
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Movie Id" PropertyName="MovieId">@context.MovieId</GridColumn>
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Movie Name" PropertyName="MovieName">@context.MovieName</GridColumn>
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Theater Room Id" PropertyName="TheaterRoomId">@context.TheaterRoomId</GridColumn>
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Theater Name" PropertyName="TheaterName">@context.TheaterName</GridColumn>
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Movie Start" PropertyName="MovieStart">@context.MovieStart</GridColumn>
        
            </Grid>
        }
    </CardBody>
</Card>

@code { // C# code block
    [Inject] private IScreeningService ScreeningService { get; set; } // Injected screening service
    [Inject] protected PreloadService PreloadService { get; set; } = default!; // Injected preload service
    [Inject] private IMovieService MovieService { get; set; } // Injected movie service
    [Inject] private ITheaterRoomService TheaterRoomService { get; set; } // Injected theater room service

    private IEnumerable<ScreeningWithInfoDto> AllScreenings { get; set; } // Collection of all screenings
    private IEnumerable<MovieWithCategoryDto> AllMovies { get; set; } // Collection of all movies
    private IEnumerable<TheaterRoomsWInfoDto> AllTheatherRooms { get; set; } // Collection of all theater rooms
    private bool IsScreeningAddedSuccess { get; set; } // Flag to indicate if a screening was added successfully

    private Grid<ScreeningWithInfoDto> _screeningGrid = default!; // Reference to the screening grid
    RadzenScheduler<Appointment> _scheduler; // Scheduler component for managing appointments
    public IList<Appointment> Appointments = new List<Appointment>(); // List of appointments

    private async Task<GridDataProviderResult<ScreeningWithInfoDto>> GridDataProvider(GridDataProviderRequest<ScreeningWithInfoDto> request) // Method to provide data to the grid
    {
        return await Task.FromResult(request.ApplyTo(AllScreenings)); // Apply filtering, sorting, and paging to the data
    }

    protected override async Task OnInitializedAsync() // Method called when the component is initialized
    {
        PreloadService.Show(); // Show loading spinner
        AllScreenings = await ScreeningService.GetAllScreenings(); // Get all screenings
        AllMovies = await MovieService.GetMovies(); // Get all movies
        AllTheatherRooms = await TheaterRoomService.GetAllTheaterRooms(); // Get all theater rooms
        foreach (var screening in AllScreenings) // Iterate through all screenings
        {
            var movie = AllMovies.FirstOrDefault(m => m.Id == screening.MovieId); // Get the movie associated with the screening
            
            var appointment = new Appointment // Create an appointment object
            {
                MovieId = screening.MovieId,
                MovieName = screening.MovieName,
                MovieStart = screening.MovieStart,
                MovieEnd = screening.MovieStart.AddMinutes(movie.Duration),
                AppointmentTitle = $"{screening.MovieName} ({screening.TheaterName})"
            };
            Appointments.Add(appointment); // Add the appointment to the list
        }
        PreloadService.Hide(); // Hide loading spinner
    }

    public class Appointment // Class representing an appointment
    {
        public int MovieId { get; set; } // ID of the movie
        public string MovieName { get; set; } // Name of the movie
        public int TheaterRoomId { get; set; } // ID of the theater room
        public string TheaterRoomName { get; set; } // Name of the theater room
        public DateTime MovieStart { get; set; } // Start time of the movie
        public DateTime MovieEnd { get; set; } // End time of the movie
        public string AppointmentTitle { get; set; } // Title of the appointment
    }

    private void OnSlotRender(SchedulerSlotRenderEventArgs args) // Method called when rendering a scheduler slot
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today) // Check if the view is month and the slot start date is today
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);"; // Apply background color to highlight today's date
        }
    }

    private async Task OnSlotSelect(SchedulerSlotSelectEventArgs args) // Method called when selecting a slot in the scheduler
    {
        if (args.View.Text != "Year") // Check if the selected view is not year
        {
            Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Screening", // Open a dialog for adding a screening
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null) // Check if data was returned from the dialog
            {
                var addScreeningDto = new AddScreeningDto // Create DTO for adding a screening
                {
                    MovieId = data.MovieId,
                    MovieStart = data.MovieStart.SetKindUtc(),
                    TheaterRoomId = data.TheaterRoomId
                };

                PreloadService.Show(); // Show loading spinner
                var result = await ScreeningService.AddScreening(addScreeningDto); // Add the screening
                IsScreeningAddedSuccess = true; // Set success flag
                AllScreenings.Append(result); // Add the new screening to the collection
                AllScreenings = await ScreeningService.GetAllScreenings(); // Refresh the list of screenings

                Appointments.Add(data); // Add the appointment to the list
                // Either call the Reload method or reassign the Data property of the Scheduler
                await _scheduler.Reload(); // Reload the scheduler
                PreloadService.Hide(); // Hide loading spinner
            }
        }
    }

    private async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args) // Method called when selecting an appointment
    {
        Console.WriteLine("On appointment select");
    }

    private void OnAppointmentMouseEnter(SchedulerAppointmentMouseEventArgs<Appointment> args) // Method called when mouse enters an appointment
    {
        Console.WriteLine("OnAppointmentMouseEnter");
        TooltipService.Open(args.Element, ts => // Open a tooltip on mouse enter
            @<RadzenStack Orientation="Orientation.Vertical" Gap="0" Class="rz-p-6" Style="min-width: 250px; max-width: 600px;">
                <RadzenText TextStyle="TextStyle.H4" Class="rz-mb-4" Style="color: white">
                    @args.Data.MovieName
                </RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="4px">
                    <RadzenText TextStyle="TextStyle.Body2" Style=" width: 44px; color: white">
                        <strong>Start</strong>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: white">
                        @args.Data.MovieStart.ToString("hh:mm ⋅ dddd, MMMM d")
                    </RadzenText>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="4px">
                    <RadzenText TextStyle="TextStyle.Body2" Style="width: 44px; color: white">
                        <strong>End</strong>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: white">
                        @args.Data.MovieEnd.ToString("hh:mm ⋅ dddd, MMMM d")
                    </RadzenText>
                </RadzenStack>
            </RadzenStack>, new TooltipOptions { Position = TooltipPosition.Right, Duration = null }); // Set tooltip options
    }

    private void OnAppointmentMouseLeave(SchedulerAppointmentMouseEventArgs<Appointment> args) // Method called when mouse leaves an appointment
    {
        TooltipService.Close(); // Close the tooltip
    }
}