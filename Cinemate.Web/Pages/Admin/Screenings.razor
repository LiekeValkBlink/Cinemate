@layout AdminLayout
@page "/admin/screenings"
@using Cinemate.Web.Services.Contracts
@using Cinemate.Models.Dto
@using Cinemate.Models.Static
@using Cinemate.Web.Components.Admin
@inject DialogService DialogService
@inject TooltipService TooltipService

<PageTitle>Screening</PageTitle>

<Card>
    <CardBody>
        <h1 class="mb-3">Screenings</h1>
        @if (IsScreeningAddedSucces)
        {
            <Alert Color="AlertColor.Success"  Dismissable="true">
                <Icon Name="IconName.CheckCircleFill" class="me-2"></Icon>
                Screening added successfully!
            </Alert>
        }   


        <RadzenScheduler
            @ref="@scheduler"
            SlotRender=@OnSlotRender
            TItem="Appointment"
            Data="Appointments"
            StartProperty="MovieStart"
            EndProperty="MovieEnd"
            TextProperty="AppointmentTitle"
            SlotSelect=@OnSlotSelect
            AppointmentSelect=@OnAppointmentSelect
            AppointmentMouseEnter=@OnAppointmentMouseEnter
            AppointmentMouseLeave=@OnAppointmentMouseLeave>
            <RadzenDayView/>
            <RadzenWeekView/>
            <RadzenMonthView/>
        </RadzenScheduler>
        
        @if (AllScreenings is not null)
        {
            <Grid @ref="screeningGrid"
                  TItem="ScreeningWithInfoDto"
                  Class="table table-hover table-bordered table-striped mt-5"
                  DataProvider="GridDataProvider"
                  AllowFiltering="true"
                  AllowSorting="true"
                  AllowPaging="true"
                  Responsive="true"
                  PageSize="20">
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Id" PropertyName="Id" SortKeySelector="@(item => item.Id)" IsDefaultSortColumn="true" SortDirection="SortDirection.Ascending">@context.Id</GridColumn>
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Movie Id" PropertyName="MovieId">@context.MovieId</GridColumn>
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Movie Name" PropertyName="MovieName">@context.MovieName</GridColumn>
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Theater Room Id" PropertyName="TheaterRoomId">@context.TheaterRoomId</GridColumn>
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Theater Name" PropertyName="TheaterName">@context.TheaterName</GridColumn>
                <GridColumn TItem="ScreeningWithInfoDto" HeaderText="Movie Start" PropertyName="MovieStart">@context.MovieStart</GridColumn>
        
            </Grid>
        }
    </CardBody>
</Card>

@code {
    [Inject] private IScreeningService ScreeningService { get; set; }
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    [Inject] private IMovieService MovieService { get; set; }
    [Inject] private ITheaterRoomService TheaterRoomService { get; set; }

    private IEnumerable<ScreeningWithInfoDto> AllScreenings { get; set; }
    private IEnumerable<MovieWithCategoryDto> AllMovies { get; set; }
    private IEnumerable<TheaterRoomsWInfoDto> AllTheatherRooms { get; set; }
    private bool IsScreeningAddedSucces { get; set; }
    
    private Grid<ScreeningWithInfoDto> screeningGrid = default!;
    RadzenScheduler<Appointment> scheduler;
    public IList<Appointment> Appointments = new List<Appointment>();

    

    private async Task<GridDataProviderResult<ScreeningWithInfoDto>> GridDataProvider(GridDataProviderRequest<ScreeningWithInfoDto> request)
    {
        return await Task.FromResult(request.ApplyTo(AllScreenings));
    }

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show();
        AllScreenings = await ScreeningService.GetAllScreenings();
        AllMovies = await MovieService.GetMovies();
        AllTheatherRooms = await TheaterRoomService.GetAllTheaterRooms();
        foreach (var screening in AllScreenings)
        {
            var movie = AllMovies.FirstOrDefault(m => m.Id == screening.MovieId);
            
            var appointment = new Appointment
            {
                MovieId = screening.MovieId,
                MovieName = screening.MovieName,
                MovieStart = screening.MovieStart,
                MovieEnd = screening.MovieStart.AddMinutes(movie.Duration),
                AppointmentTitle = $"{screening.MovieName} ({screening.TheaterName})"
            };
            Appointments.Add(appointment);
        }
        PreloadService.Hide();
    }

    
    public class Appointment
    {
        public int MovieId { get; set; }
        public string MovieName { get; set; }
        public int TheaterRoomId { get; set; }
        public string TheaterRoomName { get; set; }
        public DateTime MovieStart { get; set; }
        public DateTime MovieEnd { get; set; }
        public string AppointmentTitle { get; set; }
    }
    
    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
        
    }

    
    private async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        if (args.View.Text != "Year")
        {
            Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Screening",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {

                var addScreeningDto = new AddScreeningDto
                {
                    MovieId = data.MovieId,
                    MovieStart = data.MovieStart.SetKindUtc(),
                    TheaterRoomId = data.TheaterRoomId
                };
                
                PreloadService.Show();
                var result = await ScreeningService.AddScreening(addScreeningDto);
                IsScreeningAddedSucces = true;
                AllScreenings.Append(result);
                AllScreenings = await ScreeningService.GetAllScreenings();
                
                Appointments.Add(data);
                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler.Reload();
                PreloadService.Hide();
            }
        }
    }

    private async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        Console.WriteLine("On appointment select");
    }
    
    private void OnAppointmentMouseEnter(SchedulerAppointmentMouseEventArgs<Appointment> args)
    {
        Console.WriteLine("OnAppointmentMouseEnter");
        TooltipService.Open(args.Element, ts =>
            @<RadzenStack Orientation="Orientation.Vertical" Gap="0" Class="rz-p-6" Style="min-width: 250px; max-width: 600px;">
                <RadzenText TextStyle="TextStyle.H4" Class="rz-mb-4" Style="color: white">
                    @args.Data.MovieName
                </RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="4px">
                    <RadzenText TextStyle="TextStyle.Body2" Style=" width: 44px; color: white">
                        <strong>Start</strong>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: white">
                        @args.Data.MovieStart.ToString("hh:mm ⋅ dddd, MMMM d")
                    </RadzenText>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="4px">
                    <RadzenText TextStyle="TextStyle.Body2" Style="width: 44px; color: white">
                        <strong>End</strong>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: white">
                        @args.Data.MovieEnd.ToString("hh:mm ⋅ dddd, MMMM d")
                    </RadzenText>
                </RadzenStack>
            </RadzenStack>, new TooltipOptions { Position = TooltipPosition.Right, Duration = null });
    }
    
    private void OnAppointmentMouseLeave(SchedulerAppointmentMouseEventArgs<Appointment> args)
    {
        // TooltipService.Close();
    }
    
}