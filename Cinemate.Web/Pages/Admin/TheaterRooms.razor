@layout AdminLayout
@page "/admin/theater-rooms"
@using Cinemate.Web.Services.Contracts
@using Cinemate.Models.Dto
<PageTitle>TheaterRoom</PageTitle>

<Card>
    <CardBody>
         @if (IsTheaterRoomAddedSucces)
                {
                    <Alert Color="AlertColor.Success"  Dismissable="true">
                        <Icon Name="IconName.CheckCircleFill" class="me-2"></Icon>
                        Room added successfully!
                    </Alert>
                }
        <h1>Theater Rooms</h1>
        <Button Color="ButtonColor.Primary" class="my-4" @onclick="ShowModal">Add Room</Button>

        @if (AllTheaterRooms is not null)
        {
            <Grid @ref="theaterRoomsGrid"
                  TItem="TheaterRoomsWInfoDto"
                  Class="table table-hover table-bordered table-striped"
                  DataProvider="TheaterRoomsDataProvider"
                  AllowFiltering="true"
                  AllowSorting="true"
                  AllowPaging="true"
                  Responsive="true">
                <GridColumn TItem="TheaterRoomsWInfoDto" PropertyName="Id" SortKeySelector="@((item) => item.Id)" HeaderText="ID" Sortable="true" IsDefaultSortColumn="true" SortDirection="SortDirection.Ascending">@context.Id</GridColumn>
                <GridColumn TItem="TheaterRoomsWInfoDto" PropertyName="Name" SortKeySelector="@((item) => item.Name)" HeaderText="Name" Sortable="true">@context.Name</GridColumn>
                <GridColumn TItem="TheaterRoomsWInfoDto" PropertyName="TheaterName" SortKeySelector="@((item) => item.TheaterName)" HeaderText="Theater Name" Sortable="true">@context.TheaterName</GridColumn>
            </Grid>
        }
    </CardBody>
</Card>

<Modal @ref="addTheaterModal" Title="Add theater">
    <BodyTemplate>
        <EditForm Model="addTheaterRoomDto" OnValidSubmit="@HandleValidSubmit">
            <ValidationSummary />
            <div class="mb-3">
                <label for="theaterRoomName" class="form-label">Theater</label>
                <select id="theaterRoomName" class="form-select" @bind="@addTheaterRoomDto.TheaterId" required>
                    <option value="">Select a theater</option>
                    @foreach (var theater in AllTheaters)
                    {
                        <option value="@theater.Id">@theater.Name</option>
                    }
                </select>
                <ValidationMessage For="@(() => addTheaterRoomDto.TheaterId)" />
            </div>
            <div class="mb-3">
                <label for="theaterRoomName" class="form-label">Room name</label>
                <InputText id="theaterRoomName" class="form-control" @bind-Value="addTheaterRoomDto.Name" required/>
                <ValidationMessage For="@(() => addTheaterRoomDto.Name)"/>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </BodyTemplate>
</Modal>

@code { // C# code block
    [Inject] private PreloadService PreloadService { get; set; } = default!; // Injected preload service
    [Inject] private ITheaterRoomService TheaterRoomService { get; set; } // Injected theater room service
    [Inject] private ISeatsService SeatsService { get; set; } // Injected seats service
    [Inject] private ITheaterService TheaterService { get; set; } // Injected theater service

    private IEnumerable<TheaterRoomsWInfoDto> AllTheaterRooms; // Collection of all theater rooms
    private IEnumerable<TheaterDto> AllTheaters { get; set; } // Collection of all theaters
    private AddTheaterRoomDto addTheaterRoomDto = new(); // DTO for adding a theater room
    private bool IsTheaterRoomAddedSucces { get; set; } // Flag to indicate if a theater room was added successfully

    private Modal addTheaterModal = default!; // Reference to the add theater modal
    BlazorBootstrap.Grid<TheaterRoomsWInfoDto> theaterRoomsGrid = default!; // Reference to the theater rooms grid

    private async Task ShowModal() // Method to show the add theater modal
    {
        await addTheaterModal.ShowAsync(); // Show the modal asynchronously
    }

    private async Task HandleValidSubmit() // Method to handle valid form submission
    {
        try
        {
            PreloadService.Show(); // Show loading spinner
            var result = await TheaterRoomService.AddTheaterRoom(addTheaterRoomDto); // Add the theater room
            IsTheaterRoomAddedSucces = true; // Set success flag
            await addTheaterModal.HideAsync(); // Hide the add theater modal
            PreloadService.Hide(); // Hide loading spinner
        }
        catch (Exception e)
        {
            Console.WriteLine(e); // Log the exception
            throw; // Rethrow the exception
        }
    }

    private async Task<GridDataProviderResult<TheaterRoomsWInfoDto>> TheaterRoomsDataProvider(GridDataProviderRequest<TheaterRoomsWInfoDto> request) // Method to provide data to the grid
    {
        return await Task.FromResult(request.ApplyTo(AllTheaterRooms)); // Apply filtering, sorting, and paging to the data
    }
    
    protected override async Task OnInitializedAsync() // Method called when the component is initialized
    {
        PreloadService.Show(); // Show loading spinner
        AllTheaterRooms = await TheaterRoomService.GetAllTheaterRooms(); // Get all theater rooms
        AllTheaters = await TheaterService.GetAllTheaters(); // Get all theaters
        PreloadService.Hide(); // Hide loading spinner
    }
}
