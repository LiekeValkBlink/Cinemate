@layout UserLayout
@page "/kiosk/seat-reservation"
@page "/kiosk/seat-reservation/{screeningId:int}"
@using Cinemate.Web.Services.Contracts
@using Cinemate.Models.Dto
@using Cinemate.Web.Services

<div class="cinema-overview">
    <div class="movie-screen"></div>
    <p>Filmscherm</p>

    @* for each row in the theater, show each seat per row *@
    @foreach (var row in _allSeats.GroupBy(s => s.Row))
    {
        <div class="seat-row">
            @foreach (var seat in row)
            {
                <div class="seat" style="background-color: @GetSeatBackgroundColor(seat.Id)"
                    @onclick="() => SelectSeat(seat.Id)">
                    @seat.Number
                </div>
            }
        </div>
    }
</div>

<div class="legenda-container">
    <div class="seat" style="background-color: green;"></div><p>Vrij</p>
    <div class="seat" style="background-color: yellow;"></div><p>Gekozen</p>
    <div class="seat" style="background-color: red;"></div><p>Bezet</p>
</div>

<div class="page-navigation">
    <button class="secondary-btn" @onclick="NavigateBack">
        <i class="fa-solid fa-chevron-left"></i>
        Terug
    </button>

    <button class="primary-btn" @onclick="OnProceed">
        Bevestig je keuze
        <i class="fa-solid fa-chevron-right"></i>
    </button>
</div>

@code { // C# code block
    [Parameter] public int screeningId { get; set; } // Parameter to receive the screening ID
    [Inject] NavigationManager NavigationManager { get; set; } // Injected navigation manager
    [Inject] ISeatsService _seatsService { get; set; } // Injected seats service
    [Inject] ITheaterRoomService _theaterRoomService { get; set; } // Injected theater room service
    [Inject] IScreeningService _screeningService { get; set; } // Injected screening service
    [Inject] IReservationService _reservationService { get; set; } // Injected reservation service

    private ScreeningWithInfoDto _screening; // Stores screening information
    private IEnumerable<SeatsWInfoDto> _allSeats; // Stores all seats in the theater room
    private IEnumerable<ReservedSeatDto> _reservedSeat; // Stores reserved seats for the screening
    
    private List<int> selectedSeats = new List<int>(); // List to store selected seat IDs
    public string ErrorMessage { get; set; } // Error message to display
    
    protected override async Task OnInitializedAsync() // Method called when the component is initialized
    {
        _screening = await _screeningService.GetScreening(screeningId); // Get screening details
        _allSeats = await _seatsService.GetSeatsByTheaterRoomId(_screening.TheaterRoomId); // Get all seats in the theater room
        _reservedSeat = await _seatsService.GetReservedSeatsByScreeningId(_screening.Id); // Get reserved seats for the screening
    }

    private void NavigateBack() // Method to navigate back
    {
        NavigationManager.NavigateTo($"/kiosk/show-reservation/{_screening.MovieId}"); // Navigate to previous page
    }

    private async void OnProceed() // Method to proceed to the next step
    {
        if (!selectedSeats.Any()) // If no seats are selected
        {
            ErrorMessage = "No Seats selected"; // Set error message
        }
        else // If seats are selected
        {
            var preReservationDto = new PreReservationDto // Create pre-reservation DTO
            {
                ScreeningId = screeningId, // Set screening ID
                SeatId = selectedSeats // Set selected seat IDs
            };
            await _reservationService.SetLocalPreReservation(preReservationDto); // Set local pre-reservation
            foreach (var seat in selectedSeats) // Loop through selected seats
            {
                Console.WriteLine($"Selected seat: {seat}"); // Log selected seats
            }
            NavigationManager.NavigateTo($"/tickets-and-payment"); // Navigate to tickets and payment page
        }
    }
    
    private string GetSeatBackgroundColor(int seatId) // Method to determine seat background color
    {
        var seat = _allSeats.FirstOrDefault(s => s.Id == seatId); // Get seat information
        if (seat != null) // If seat exists
        {
            if (_reservedSeat.Any(r => r.Id == seatId)) // If seat is reserved
            {
                return "red"; // Occupied (red color)
            }

            if (selectedSeats.Contains(seatId)) // If seat is selected
            {
                return "yellow"; // Selected (yellow color)
            }
        }
        return "green"; // Free (green color)
    }
    
    private void SelectSeat(int seatId) // Method to select/deselect a seat
    {
        var isSeatReserved = _reservedSeat.Any(r => r.Id == seatId); // Check if seat is reserved
        
        if (!isSeatReserved) // If seat is not reserved
        {
            if (selectedSeats.Contains(seatId)) // If seat is already selected
            {
                selectedSeats.Remove(seatId); // Deselect the seat
            }
            else // If seat is not selected
            {
                selectedSeats.Add(seatId); // Select the seat
            }
        }
    }
}

