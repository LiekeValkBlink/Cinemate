@layout UserLayout
@page "/kiosk/seat-reservation"
@page "/kiosk/seat-reservation/{screeningId:int}"
@using Cinemate.Web.Services.Contracts
@using Cinemate.Models.Dto
@using Cinemate.Web.Services

<div class="cinema-overview">
    <div class="movie-screen">
        <p>Filmscherm</p>
    </div>

    @* for each row in the theater, show each seat per row *@
    @foreach (var row in _allSeats.GroupBy(s => s.Row))
    {
        <div class="seat-row">
            @foreach (var seat in row)
            {
                <div class="seat" style="background-color: @GetSeatBackgroundColor(seat.Id)"
                     @onclick="() => SelectSeat(seat.Id)">
                    @seat.Number
                </div>
            }
        </div>
    }
    
</div>

<div class="interaction-container">
    <div class="legenda-container">
        <div class="seat free"></div><p>Vrij</p>
        <div class="seat selected"></div><p>Gekozen</p>
        <div class="seat occupied"></div><p>Bezet</p>
    </div>
</div>

<div class="page-navigation">
    <button class="secondary-btn" @onclick="NavigateBack">
        <i class="fa-solid fa-chevron-left"></i>
        Terug
    </button>

    <button class="primary-btn" @onclick="OnProceed">
        Bevestig je keuze
        <i class="fa-solid fa-chevron-right"></i>
    </button>
</div>

@code {

    [Parameter] public int screeningId { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] ISeatsService _seatsService { get; set; }
    [Inject] ITheaterRoomService _theaterRoomService { get; set; }
    [Inject] IScreeningService _screeningService { get; set; }
    [Inject] IReservationService _reservationService { get; set; }
    private ScreeningWithInfoDto _screening;
    private IEnumerable<SeatsWInfoDto> _allSeats;
    private IEnumerable<ReservedSeatDto> _reservedSeat;
    // Store the seat id's selected by the user to reserve
    private List<int> selectedSeats = new List<int>();
    public string ErrorMessage { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        _screening = await _screeningService.GetScreening(screeningId);
        _allSeats = await _seatsService.GetSeatsByTheaterRoomId(_screening.TheaterRoomId);
        _reservedSeat = await _seatsService.GetReservedSeatsByScreeningId(_screening.Id);
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo($"/kiosk/show-reservation/{_screening.MovieId}");
    }

    private async void OnProceed()
    {

        if (!selectedSeats.Any())
        {
            ErrorMessage = "No Seats selected";
            
        }
        else
        {
            var preReservationDto = new PreReservationDto
            {
                ScreeningId = screeningId,
                SeatId = selectedSeats
            };
            await _reservationService.SetLocalPreReservation(preReservationDto);
            foreach (var seat in selectedSeats)
            {
                Console.WriteLine($"Selected seat: {seat}");
            }
            
            NavigationManager.NavigateTo($"/tickets-and-payment"); 
        }

        


    }
    
    private string GetSeatBackgroundColor(int seatId)
    {
        // determine the status of the seat from DB info and return a color value as a string
        var seat = _allSeats.FirstOrDefault(s => s.Id == seatId);
        if (seat != null)
        {
            // Check if the seat is reserved or selected
            if (_reservedSeat.Any(r => r.Id == seatId))
            {
                return "#19072c"; // Occupied
            }
            else if (selectedSeats.Contains(seatId))
            {
                return "#6c42bf"; // Selected
            }
        }
        return "#2b1b3d"; // Free
    }
    
    private void SelectSeat(int seatId)
    {
        //add the seat selected by the user to a list or remove it if already selected
        var isSeatReserved = _reservedSeat.Any(r => r.Id == seatId);
        
        if (!isSeatReserved)
        {
            if (selectedSeats.Contains(seatId))
            {
                selectedSeats.Remove(seatId); // Deselect the seat
            }
            else
            {
                selectedSeats.Add(seatId); // Select the seat
            }
        }
    }

    
}

