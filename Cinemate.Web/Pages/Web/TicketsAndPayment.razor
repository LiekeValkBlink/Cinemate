@layout UserLayout
@page "/tickets-and-payment"
@using Cinemate.Web.Services.Contracts
@using Microsoft.AspNetCore.WebUtilities
@using Cinemate.Models.Dto
@inject SpinnerService _spinnerService

<EditForm Model="AddReservationDto" OnValidSubmit="@HandleValidSubmit">
<div class="tickets-and-payment-container">
    
    <div class="col">
        <h2>Jouw gegevens</h2>
        <p>Velden met een * zijn verplicht!</p>
        
            <label for="first_name">Voornaam *</label>
            <InputText id="first_name" @bind-Value="FirstName" required/>
            <label for="last_name">Achternaam *</label>
            <InputText id="last_name" @bind-Value="LastName" required/>
            <label for="email_address">E-mailadres *</label>
            <InputText id="email_address" @bind-Value="Email" required/>
            <label for="email_address_redo">Herhaal e-mailadres</label>
            <InputText id="email_address_redo" @bind-Value="Email2" required/>
        
    </div>
    <div class="col">
        <h2>Maak jouw bestelling compleet</h2>
        @if (!SecretMovie)
        {
            <form>
                <label>Selecteer een tickettype</label>
                <RadzenDropDown class="dropdown" @bind-Value="TicketType" Data=@TicketTypes Change="@OnTicketTypeChange" required/>
            </form> 
        }
        <div class="popcorn-arrangement">
            <div class="col">
                <img src="images/popcorn.png"/>
            </div>
            <div class="col">
                <h3>Popcorn arrangement</h3>
                <br/>
                <p>Voeg nu een medium bak (250gr) popcorn en een cola-light toe aan jouw bestelling voor maar €2.50!</p>
                <br/>
                <form>
                    <div class="checkbox-container">
                        <RadzenCheckBox TValue="bool" @bind-Value=@PopcornSelected Change="@OnTicketTypeChange" class="checkbox"/>
                        <p> Ik wil het popcorn arrangement</p>
                    </div>
                </form>
            </div>
        </div>
        <br/>
        <br/>
        <h2>Totaal</h2>
        <table>
            <tr>
                <td>
                    @if (SecretMovie)
                    {
                        <h3>1x Secret movie ticket</h3>
                    }
                    else
                    {
                        <h3>@NumOfSeats x @TicketType ticket voor @ScreeningWithInfoDto.MovieName</h3>
                    }
                </td>
                <td>
                    <h3>€@FinalPrice</h3>
                </td>
            </tr>
        </table>
    </div>

</div>
<div class="page-navigation">
   <button class="secondary-btn" type="button" @onclick="GoBack">
       <i class="fa-solid fa-chevron-left"></i>
       Terug
   </button>

   <button class="primary-btn" type="submit">
       Bevestig je keuze
       <i class="fa-solid fa-chevron-right"></i>
   </button>
</div>
</EditForm>

@code { // C# code block
    [Inject] private IReservationService ReservationService { get; set; } // Injected reservation service
    [Inject] private IScreeningService ScreeningService { get; set; } // Injected screening service
    [Inject] NavigationManager NavigationManager { get; set; } // Injected navigation manager
    [Inject] private IUserService UserService { get; set; } // Injected user service

    private PreReservationDto PreReservationDto { get; set; } // Stores pre-reservation information
    private SecretMoviePreReservation SecretMoviePreReservation { get; set; } // Stores secret movie pre-reservation information
    private ScreeningWithInfoDto ScreeningWithInfoDto { get; set; } // Stores screening information
    private AddReservationDto AddReservationDto = new AddReservationDto(); // DTO for adding a reservation

    private bool SecretMovie; // Flag indicating if it's a secret movie
    private string FirstName { get; set; } // First name of the user
    private string LastName { get; set; } // Last name of the user
    private string Email { get; set; } // Email of the user
    private string Email2 { get; set; } // Confirmation email of the user

    private string TicketType = "Normaal"; // Selected ticket type (default: Normaal)
    private List<string> TicketTypes = ["Normaal", "Kinder korting", "65 Plus", "Studentenkorting"]; // List of available ticket types
    private bool PopcornSelected { get; set; } // Flag indicating if popcorn is selected
    private decimal BasePrice = (decimal)8.5; // Base price of a ticket
    private decimal FinalPrice { get; set; } // Final price of the reservation
    private int NumOfSeats { get; set; } // Number of seats selected
    private List<int> PromoCodes = []; // List of promo codes

    protected override async Task OnInitializedAsync() // Method called when the component is initialized
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri); // Get the absolute URI
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("SecretMovie", out var value)) // Check if the URI contains a query parameter for a secret movie
        {
            SecretMovie = Convert.ToBoolean(value); // Parse the value of the query parameter
            SecretMovie = true; // Set SecretMovie flag to true
        }
        else
        {
            SecretMovie = false; // Set SecretMovie flag to false
        }
        
        Console.WriteLine(SecretMovie); // Log the value of SecretMovie flag
        switch (SecretMovie) // Switch statement based on the SecretMovie flag
        {
            case false: // If it's not a secret movie
                PreReservationDto = await ReservationService.GetLocalPreReservation(); // Get pre-reservation details
                NumOfSeats = PreReservationDto.SeatId.Count; // Get the number of seats selected
                ScreeningWithInfoDto = await ScreeningService.GetScreening(PreReservationDto.ScreeningId); // Get screening details
                FinalPrice = BasePrice * PreReservationDto.SeatId.Count; // Calculate final price
                break;
            case true: // If it's a secret movie
                SecretMoviePreReservation = await ReservationService.GetLocalSecretMoviePreReservation(); // Get secret movie pre-reservation details
                BasePrice = (decimal)6.50; // Update base price for secret movie
                FinalPrice = BasePrice; // Set final price
                PromoCodes.Add(1); // Add promo code for secret movie
                break;
        }
    }

    private async Task HandleValidSubmit() // Method to handle form submission
    {
        _spinnerService.Show(); // Show spinner

        var addUserDto = new AddUserDto // Create DTO for adding a user
        {
            Email = Email, // Set email
            Name = $"{FirstName} {LastName}", // Set name
            Password = "none", // Set password (temporary)
            SubscribedToNewsletter = false // Set subscription status
        };

        if (PopcornSelected) // If popcorn is selected
        {
            PromoCodes.Add(2); // Add promo code for popcorn
        }

        try
        {
            var result = await UserService.CreateUser(addUserDto); // Create user
            if (result != null) // If user creation is successful
            {
                if (SecretMovie == false) // If it's not a secret movie
                {
                    var reservation = new AddReservationDto // Create reservation DTO
                    {
                        Paid = true, // Set payment status
                        PaymentType = "iDeal", // Set payment type
                        Price = FinalPrice, // Set price
                        PromoCode = PromoCodes, // Set promo codes
                        ScreeningId = PreReservationDto.ScreeningId, // Set screening ID
                        SeatId = PreReservationDto.SeatId, // Set seat IDs
                        UserId = result.Id, // Set user ID
                        EmployeeId = null // Set employee ID
                    };

                    var addReservationResult = await ReservationService.AddReservation(reservation); // Add reservation
                    if (addReservationResult != null) // If reservation is added successfully
                    {
                        NavigationManager.NavigateTo($"/kiosk/RedeemTicket/{addReservationResult.Id}"); // Navigate to ticket redemption page
                    }
                }
                else // If it's a secret movie
                {
                    Console.WriteLine($"seat to add: {SecretMoviePreReservation.SeatId}"); // Log selected seat for secret movie
                    var seats = new List<int>{SecretMoviePreReservation.SeatId}; // Create list of seats
                    var secretReservation = new AddReservationDto // Create reservation DTO for secret movie
                    {
                        Paid = true, // Set payment status
                        PaymentType = "iDeal", // Set payment type
                        Price = FinalPrice, // Set price
                        PromoCode = PromoCodes, // Set promo codes
                        ScreeningId = SecretMoviePreReservation.ScreeningId, // Set screening ID
                        SeatId = seats, // Set seat IDs
                        UserId = result.Id, // Set user ID
                        EmployeeId = null // Set employee ID
                    };
                    var addReservationResult = await ReservationService.AddReservation(secretReservation); // Add reservation
                    if (addReservationResult != null) // If reservation is added successfully
                    {
                        NavigationManager.NavigateTo($"/kiosk/RedeemTicket/{addReservationResult.Id}"); // Navigate to ticket redemption page
                    }
                }
            }
        }
        catch (Exception e) // Catch any exceptions
        {
            Console.WriteLine(e); // Log exception
            throw; // Throw exception
        }
        _spinnerService.Hide(); // Hide spinner
    }

    private void OnTicketTypeChange() // Method to handle ticket type change
    {
        Console.WriteLine(TicketType); // Log selected ticket type
        FinalPrice = BasePrice; // Reset total price to base price

        if (!SecretMovie) // If it's not a secret movie
        {
            switch (TicketType) // Switch statement based on selected ticket type
            {
                case "Normaal": // If ticket type is Normaal
                    FinalPrice *= PreReservationDto.SeatId.Count; // Multiply final price by number of seats
                    break;
                case "Kinder korting":
                case "65 Plus":
                case "Studentenkorting":
                    FinalPrice = FinalPrice * PreReservationDto.SeatId.Count - (decimal)1.5 * PreReservationDto.SeatId.Count; // Apply discount
                    break;
            }

            if (PopcornSelected) // If popcorn is selected
            {
                FinalPrice += (decimal)2.5 * PreReservationDto.SeatId.Count; // Add popcorn price per seat
            }
        }
        else // If it's a secret movie
        {
            if (PopcornSelected) // If popcorn is selected
            {
                FinalPrice += (decimal)2.5; // Add popcorn price once
            }
        }
    }

    private void GoBack() // Method to navigate back
    {
        NavigationManager.NavigateTo($"kiosk/seat-reservation/{PreReservationDto.ScreeningId}"); // Navigate back to seat reservation page
    }
}
