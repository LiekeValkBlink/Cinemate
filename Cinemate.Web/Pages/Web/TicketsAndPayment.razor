@layout UserLayout
@page "/tickets-and-payment"
@using Cinemate.Web.Services.Contracts
@using Microsoft.AspNetCore.WebUtilities
@using Cinemate.Models.Dto

<EditForm Model="AddReservationDto" OnValidSubmit="@HandleValidSubmit">
<div class="tickets-and-payment-container">
    
    <div class="col">
        <h2>Jouw gegevens</h2>
        <p>Velden met een * zijn verplicht!</p>
        
            <label for="first_name">Voornaam *</label>
            <InputText id="first_name" @bind-Value="FirstName" required/>
            <label for="last_name">Achternaam *</label>
            <InputText id="last_name" @bind-Value="LastName" required/>
            <label for="email_address">E-mailadres *</label>
            <InputText id="email_address" @bind-Value="Email" required/>
            <label for="email_address_redo">Herhaal e-mailadres</label>
            <InputText id="email_address_redo" @bind-Value="Email2" required/>
        
    </div>
    <div class="col">
        <h2>Maak jouw bestelling compleet</h2>
        <form>
            <label>Selecteer een tickettype</label>
            <RadzenDropDown @bind-Value="TicketType" Data=@TicketTypes required/>
        </form>
        <div class="popcorn-arrangement">
            <div class="col">
                <img src="images/popcorn.png"/>
            </div>
            <div class="col">
                <h3>Popcorn arrangement</h3>
                <br/>
                <p>Voeg nu een medium bak (250gr) popcorn en een cola-light toe aan jouw bestelling voor maar €2.50!</p>
                <br/>
                <form>
                    <div class="checkbox-container">
                        <RadzenCheckBox @bind-Value=@PopcornSelected class="checkbox"/>
                        <p> Ik wil het popcorn arrangement</p>
                    </div>
                </form>
            </div>
        </div>
        <br/>
        <br/>
        <h2>Totaal</h2>
        <table>
            <tr>
                <td>
                    @if (SecretMovie)
                    {
                        <h3>1x Secret movie ticket</h3>
                    }
                    else
                    {
                        <h3>@NumOfSeats X @TicketType voor @ScreeningWithInfoDto.MovieName</h3>
                    }
                    
                </td>
                <td>
                    <h3>€@TotalPrice</h3>
                </td>
            </tr>
        </table>
    </div>

</div>
<div class="page-navigation">
   <button class="secondary-btn">
       <i class="fa-solid fa-chevron-left"></i>
       Terug
   </button>

   <button class="primary-btn" type="submit">
       Bevestig je keuze
       <i class="fa-solid fa-chevron-right"></i>
   </button>
</div>
</EditForm>

@code
{
    [Inject] private IReservationService ReservationService { get; set; }
    [Inject] private IScreeningService ScreeningService { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }

    private PreReservationDto PreReservationDto { get; set; }
    private SecretMoviePreReservation SecretMoviePreReservation { get; set; }
    private ScreeningWithInfoDto ScreeningWithInfoDto { get; set; }
    

    private bool SecretMovie;
    private string FirstName { get; set; }
    private string LastName { get; set; }
    private string Email { get; set; }
    private string Email2 { get; set; }

    private string TicketType = "Normaal";
    private List<string> TicketTypes = ["Normaal", "Kinder korting", "65 Plus", "Studentenkorting"];
    private bool PopcornSelected { get; set; }
    private decimal BasePrice = (decimal)8.5;
    private decimal TotalPrice { get; set; }
    private int NumOfSeats { get; set; }
    private AddReservationDto AddReservationDto = new AddReservationDto();


    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("SecretMovie", out var _value))
        {
            SecretMovie = Convert.ToBoolean(_value);
            SecretMovie = true;
        }
        else
        {
            SecretMovie = false;
        }

        Console.WriteLine(SecretMovie);
        if (SecretMovie != null || SecretMovie == false)
        {
            PreReservationDto = await ReservationService.GetLocalPreReservation();
            NumOfSeats = PreReservationDto.SeatId.Count;
            ScreeningWithInfoDto = await ScreeningService.GetScreening(PreReservationDto.ScreeningId);
            TotalPrice = BasePrice * PreReservationDto.SeatId.Count;
        }

        if (SecretMovie == true)
        {
            SecretMoviePreReservation = await ReservationService.GetLocalSecretMoviePreReservation();
            TotalPrice = (decimal)6.50;
        }
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine(FirstName);
        Console.WriteLine(LastName);
        Console.WriteLine(TicketType);   
    }
    
}
